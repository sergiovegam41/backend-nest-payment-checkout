// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Change this manually for different databases
  url      = env("DATABASE_URL")
}

// Product Management - Simple Model
model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  sku         String   @unique
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  images      ProductImage[]
  checkoutItems CheckoutItem[]

  @@map("products")
}

// Product Images
model ProductImage {
  id        String   @id @default(uuid()) @db.Uuid
  url       String
  altText   String?
  position  Int      @default(0)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  productId String   @db.Uuid
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
  @@index([productId])
  @@index([productId, position])
}

// Payment Management
model Payment {
  id                  String   @id @default(uuid()) @db.Uuid
  amount_in_cents     Int
  currency            String   @default("COP")
  status              String   @default("PENDING")
  provider            String   @default("wompi")
  provider_payment_id String?  @unique
  payment_url         String?
  name                String?
  description         String?
  single_use          Boolean  @default(true)
  collect_shipping    Boolean  @default(false)
  raw_response        String?  @db.Text
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("payments")
  @@index([provider_payment_id])
  @@index([status])
  @@index([created_at])
}

// Product Checkout Management
model Checkout {
  id                String        @id @default(uuid()) @db.Uuid
  total             Int           // Total amount in cents
  subtotal          Int           // Subtotal in cents
  taxes             Int           // Tax amount in cents
  currency          String        @default("COP")
  status            CheckoutStatus @default(PENDING)
  paymentUrl        String?       // Payment URL from provider
  providerPaymentId String?       // Payment ID from provider (Wompi)
  
  // Customer info (optional)
  customerEmail     String?
  customerName      String?
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  paidAt            DateTime?
  
  // Relations
  items             CheckoutItem[]
  
  @@map("checkouts")
  @@index([status])
  @@index([providerPaymentId])
  @@index([createdAt])
}

model CheckoutItem {
  id         String  @id @default(uuid()) @db.Uuid
  checkoutId String  @db.Uuid
  productId  String  @db.Uuid
  quantity   Int
  unitPrice  Int     // Price at time of purchase in cents
  totalPrice Int     // unitPrice * quantity
  
  // Relations
  checkout   Checkout @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  
  @@map("checkout_items")
  @@index([checkoutId])
  @@index([productId])
}

enum CheckoutStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
  CANCELLED
}
